<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Skaphandrus\AppBundle\Entity\SkSocialNotify;
use Skaphandrus\AppBundle\Entity\FosMessage;

/**
 * SkOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkSocialNotifyRepository extends EntityRepository {

    public function findBySendSocialNotifyFromPhotoSpeciesSugestion($sugestion, $user_to, $message_name) {
        if ($sugestion->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($sugestion->getFosUser());
            $skSocialNotify->setSpeciesId($sugestion->getSpecies()->getId());
            $skSocialNotify->setPhoto($sugestion->getPhoto());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }
    }
               
    public function findBySendSocialNotifyFromPhotoSpeciesValitation($validation, $user_to, $message_name) {
        if ($validation->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($validation->getFosUser());
            $skSocialNotify->setSpeciesId($validation->getSpecies()->getId());
            $skSocialNotify->setPhoto($validation->getPhoto());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }
    }

    public function findBySendSocialNotifyFromComment($comment, $user_to, $message_name) {
        if ($comment->getFosUser()->getId() <> $user_to->getId()) {

            $photo_id = substr($comment->getThread(), strpos($comment->getThread(), "-") + 1);
            $em = $this->getEntityManager();
            $photo = $em->getRepository('SkaphandrusAppBundle:SkPhoto')->findOneById($photo_id);



            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($comment->getFosUser());
            $skSocialNotify->setPhoto($photo);
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }
    }

    public function findBySendSocialNotifyFromFosMessage($message, $user_to, $message_name) {

        //$message = new FosMessage();
        if ($message->getSender()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($message->getSender());
            $skSocialNotify->setMessage($message);
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }

        //dump($skSocialNotify);
    }

    public function findBySendSocialNotifyFromPhoto($photo, $user_to, $message_name) {

        //$photo = new \Skaphandrus\AppBundle\Entity\SkPhoto();
        if ($photo->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($photo->getFosUser());
            $skSocialNotify->setSpeciesId($photo->getSpecies()->getId());
            $skSocialNotify->setPhoto($photo);
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }

        //dump($skSocialNotify);
    }

    public function findBySendSocialNotifyFromPerson($person, $user_to, $message_name) {

        //$person = new \Skaphandrus\AppBundle\Entity\SkPerson();
        if ($person->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($person->getFosUser());
            //$skSocialNotify->setParamFirst($person->getSpecies()->getId());
            //$skSocialNotify->setParamSecond($photo->getId());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }

        //dump($skSocialNotify);
    }

    public function findMessagesFromFosUser($fosUser) {

        $message = "message_aca";
        
        $query = $this->getEntityManager()
                        ->createQuery(
               'SELECT s
                FROM SkaphandrusAppBundle:SkSocialNotify s
                WHERE IDENTITY(s.userTo) = :user_id AND s.messageName = :message 
                ORDER BY s.createdAt DESC 
                '
                        )->setParameter('user_id', $fosUser->getId())->setParameter('message', $message);
        $query->setMaxResults(4);
        
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    
    
    public function findNotificationsFromFosUser($fosUser) {

        $query = $this->getEntityManager()
                        ->createQuery(
               'SELECT s
                FROM SkaphandrusAppBundle:SkSocialNotify s
                WHERE IDENTITY(s.userTo) = :user_id 
                ORDER BY s.createdAt DESC 
                '
                        )->setParameter('user_id', $fosUser->getId());
        $query->setMaxResults(4);
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    
    
        public function findUnreadNotificationsFromFosUser($fosUser) {

        $query = $this->getEntityManager()
                        ->createQuery(
               'SELECT s
                FROM SkaphandrusAppBundle:SkSocialNotify s
                WHERE IDENTITY(s.userTo) = :user_id AND s.isRead = 0'
                        )->setParameter('user_id', $fosUser->getId());
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findUsersToNotify($time) {


        if ($time == 'hourly' or $time == '1')
            $str_time = 'INTERVAL 1 HOUR';
        if ($time == 'daily' or $time == '2')
            $str_time = 'INTERVAL 24 HOUR';
        if ($time == 'weekly' or $time == '3')
            $str_time = 'INTERVAL 7 DAY';


         $em = $this->getEntityManager();
        $connection = $em->getConnection();
        
        $sql = "SELECT distinct user_to FROM sk_social_notify 
            join sk_settings on sk_settings.fos_user_id = sk_social_notify.user_to 
            WHERE created_at > (now() - " . $str_time . " ) 
                and is_read = 0 
                and sk_settings.email_notification_time_id = " . $time;



        //echo "sql = " . $sql;


        $statement = $connection->prepare($sql);
        $statement->execute();
        return $statement->fetchAll();
//        $result = array();
//
//        foreach ($values as $value) {
////            $species = $em->getRepository('SkaphandrusAppBundle:SkSpecies')->find($value['species']);
//
//            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
//            $species->setId($value['species_id']);
//            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
//            $scientific_name->setName($value['ssn_name']);
//            $scientific_name->setAuthor($value['sss_author']);
//            $species->addScientificName($scientific_name);
//            $species->setPhotosInSpecies($value['num_photos']);
//            $result[] = $species;
//        }
//
//        return $result;
    }

    

}
