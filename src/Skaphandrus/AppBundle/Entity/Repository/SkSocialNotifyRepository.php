<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Skaphandrus\AppBundle\Entity\SkSocialNotify;
use Skaphandrus\AppBundle\Entity\FosMessage;

/**
 * SkOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkSocialNotifyRepository extends EntityRepository {

    public function sendSocialNotifyFromPhotoSpeciesSugestion($sugestion, $user_to, $message_name) {
        if ($sugestion->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($sugestion->getFosUser());
            $skSocialNotify->setParamFirst($sugestion->getSpecies()->getId());
            $skSocialNotify->setParamSecond($sugestion->getPhoto()->getId());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }
    }

    public function sendSocialNotifyFromPhotoSpeciesValitation($validation, $user_to, $message_name) {
        if ($validation->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($validation->getFosUser());
            $skSocialNotify->setParamFirst($validation->getSpecies()->getId());
            $skSocialNotify->setParamSecond($validation->getPhoto()->getId());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }
    }

    public function sendSocialNotifyFromComment($comment, $user_to, $message_name) {
        if ($comment->getFosUser()->getId() <> $user_to->getId()) {

            $photo_id = substr($comment->getThread(), strpos($comment->getThread(), "-") + 1);
            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($comment->getFosUser());
            $skSocialNotify->setParamFirst($photo_id);
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }
    }

    public function sendSocialNotifyFromFosMessage($message, $user_to, $message_name) {

        //$message = new FosMessage();
        if ($message->getSender()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($message->getSender());
            $skSocialNotify->setParamFirst($message->getId());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }

        //dump($skSocialNotify);
    }
    
    
    
    
    
    public function sendSocialNotifyFromPhoto($photo, $user_to, $message_name) {

        //$photo = new \Skaphandrus\AppBundle\Entity\SkPhoto();
        if ($photo->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($photo->getFosUser());
            $skSocialNotify->setParamFirst($photo->getSpecies()->getId());
            $skSocialNotify->setParamSecond($photo->getId());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }

        //dump($skSocialNotify);
    }
    
        public function sendSocialNotifyFromPerson($person, $user_to, $message_name) {

        //$person = new \Skaphandrus\AppBundle\Entity\SkPerson();
        if ($person->getFosUser()->getId() <> $user_to->getId()) {

            $em = $this->getEntityManager();
            $skSocialNotify = new SkSocialNotify();
            $skSocialNotify->setUserFrom($person->getFosUser());
            //$skSocialNotify->setParamFirst($person->getSpecies()->getId());
            //$skSocialNotify->setParamSecond($photo->getId());
            $skSocialNotify->setMessageName($message_name);
            $skSocialNotify->setCreatedAt(new \DateTime());
            $skSocialNotify->setUserTo($user_to);
            $em->persist($skSocialNotify);
            $em->flush();
        }

        //dump($skSocialNotify);
    }
    

}
