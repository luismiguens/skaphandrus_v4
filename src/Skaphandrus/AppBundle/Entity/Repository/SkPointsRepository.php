<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SkPhotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkPointsRepository extends EntityRepository {

    //primeiras fotografias associadas a uma espécie (campo  species_id + created_at)(5 PONTOS)
    public function findFirstPhotosFromSpecies($user_id) {


        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("SELECT sk_photo.* FROM sk_photo 
            INNER JOIN ( 
            SELECT id, species_id, MIN(created_at) AS first_photo 
                FROM sk_photo GROUP BY species_id ) first_record ON sk_photo.id = first_record.id 
            WHERE sk_photo.fos_user_id = :user_id ");
        $statement->bindValue('user_id', $user_id);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }

    //fotografias de espécie(validada) (+ 3 validações)(4 PONTOS)
    public function findValidatedSpeciesPhotos($user_id) {


        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("SELECT sk_photo.* FROM sk_photo 
            INNER JOIN ( 
            SELECT photo_id, species_id, count(species_id) as soma 
                FROM sk_photo_species_validation group by photo_id, species_id having soma > 3 ) validated_record ON sk_photo.id = validated_record.photo_id 
            WHERE sk_photo.fos_user_id = :user_id ");
        $statement->bindValue('user_id', $user_id);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }

    //fotografia de espécie (associada) (campo especie_id ) 
    public function findAssociatedSpeciesPhotos($user_id) {


        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("SELECT sk_photo.* FROM sk_photo 
            WHERE sk_photo.species_id <> 0 AND sk_photo.species_id is not null and  sk_photo.fos_user_id = :user_id ");
        $statement->bindValue('user_id', $user_id);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    
    
        //espécies distintas (associada) (campo especie_id ) 
    public function findDistictValidatedSpeciesPhotos($user_id) {


        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("SELECT distinct(species_id) FROM sk_photo where is_validated=true AND sk_photo.fos_user_id = :user_id ");
        $statement->bindValue('user_id', $user_id);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    
    
    
    
        //primeiras fotografias associadas a um spot (campo spot_id + created_at)(5 PONTOS)
    public function findFirstPhotosFromSpot($user_id) {


        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("SELECT sk_photo.* FROM sk_photo 
            INNER JOIN ( 
            SELECT id, spot_id, MIN(created_at) AS first_photo 
                FROM sk_photo GROUP BY spot_id ) first_record ON sk_photo.id = first_record.id 
            WHERE sk_photo.fos_user_id = :user_id ");
        $statement->bindValue('user_id', $user_id);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    
        //fotografias de spot (associada) (campo spot_id ) 
    public function findAssociatedSpotsPhotos($user_id) {


        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("SELECT sk_photo.* FROM sk_photo 
            WHERE sk_photo.spot_id <> 0 AND sk_photo.spot_id is not null and sk_photo.fos_user_id = :user_id ");
        $statement->bindValue('user_id', $user_id);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    
 
    

}
