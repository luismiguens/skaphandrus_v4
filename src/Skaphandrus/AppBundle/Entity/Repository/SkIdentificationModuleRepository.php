<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Skaphandrus\AppBundle\Utils\Utils;

/**
 * SkSpotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkIdentificationModuleRepository extends EntityRepository {

    
       public function isModuleInAcquisitionsFromUser($fos_user_id, $module_id) {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT fos_user_id "
                . "FROM sk_identification_acquisition "
                . "WHERE fos_user_id = " . $fos_user_id ." "
                . "AND module_id = ". $module_id;

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        
        //dump($sql);
        
        if($values):
            return "1";
        else:
            return "0";
        endif;
                
    }
    
    
    
    
    
    
    public function findBySlug($slug,$locale) {
        $name = Utils::unslugify($slug);
        
        $query = $this->getEntityManager()
                        ->createQuery(
                                'SELECT m
                FROM SkaphandrusAppBundle:SkIdentificationModule m
                JOIN m.translations t
                WHERE t.name = :name
                AND t.locale = :locale' )->setParameter('name', $name)->setParameter('locale', $locale);
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    
    
     public function findByFosUser($fos_user) {

        $query = $this->getEntityManager()
                        ->createQuery(
               'SELECT m
                FROM SkaphandrusAppBundle:SkIdentificationModule m
                WHERE m.isActive = TRUE ');
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    

}
