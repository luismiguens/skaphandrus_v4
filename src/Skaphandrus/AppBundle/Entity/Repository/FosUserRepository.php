<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\DBAL\DriverManager;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * SkPhotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FosUserRepository extends EntityRepository {

    public function getQueryBuilder($params, $limit = 20, $order = array('id' => 'desc'), $offset = 0) {


        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('u')->from('SkaphandrusAppBundle:FosUser', 'u');
        $qb->leftJoin('u.photos', 'p', 'WITH', 'p.fosUser = u.id');

        //users
        if (array_key_exists('fosUser', $params)) {
            $qb->andWhere('p.fosUser = ?2');
            $qb->setParameter(2, $params['fosUser']);
        }

        //spots, locations, regions and countries
        if (array_key_exists('spot', $params)) {
            $qb->andWhere('p.spot = ?3');
            $qb->setParameter(3, $params['spot']);
        }

        if (array_key_exists('location', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = ?4');
            $qb->setParameter(4, $params['location']);
        }

        if (array_key_exists('region', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = l.id');
            $qb->join('l.region', 'r', 'WITH', 'l.region = ?5');
            $qb->setParameter(5, $params['region']);
        }

        if (array_key_exists('country', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = l.id');
            $qb->join('l.region', 'r', 'WITH', 'l.region = r.id');
            $qb->join('r.country', 'c', 'WITH', 'r.country = ?6');
            $qb->setParameter(6, $params['country']);
        }

        //species, genus, families, orders, classes, kingdoms
        if (array_key_exists('species', $params)) {
            $qb->andWhere('p.species = ?7');
            $qb->setParameter(7, $params['species']);
        }

        if (array_key_exists('kingdom', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ph.id');
            $qb->join('ph.kingdom', 'k', 'WITH', 'ph.kingdom = ?8');
            $qb->setParameter(8, $params['kingdom']);
        }


        if (array_key_exists('phylum', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ?9');
            $qb->setParameter(9, $params['phylum']);
        }

        if (array_key_exists('class', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = ?10');
            $qb->setParameter(10, $params['class']);
        }

        if (array_key_exists('order', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = ?11');
            $qb->setParameter(11, $params['order']);
        }

        if (array_key_exists('family', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = ?12');
            $qb->setParameter(12, $params['family']);
        }

        if (array_key_exists('genus', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = ?13');
            $qb->setParameter(13, $params['genus']);
        }

//        if ($order) {
//            $qb->orderBy('p.'.key($order), $order[key($order)]);
//        }
//
//        if ($offset) {
//            $qb->setFirstResult($offset);
//        }
//        
//       
//            $qb->setMaxResults($limit);
//echo $qb;

        return $qb;
    }

    public function findWithPhotoCountByTaxon($next_taxon, $taxon_name, $taxon_id, $limit = 20) {

//        dump($taxon_name);
//        dump($taxon_id);
//        

        $query = $this->getEntityManager()
                        ->createQuery(
                                'SELECT u as user, COUNT(photo.id) as photosInUser
                FROM SkaphandrusAppBundle:FosUser u
                JOIN SkaphandrusAppBundle:SkPhoto photo WITH u.id = IDENTITY(photo.fosUser)
                JOIN photo.species s
                JOIN s.genus g
                JOIN g.family f
                JOIN f.order o
                JOIN o.class c
                JOIN c.phylum p 
                JOIN p.kingdom k
                WHERE ' . substr($taxon_name, 0, 1) . '.id = :taxon_id 
                GROUP BY u.id
                ORDER BY photosInUser DESC'
                        )->setParameter('taxon_id', $taxon_id)
                ->setMaxResults($limit);
//        dump($query->getDQL());
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getPhotosInContest($contest_id, $user_id) {

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();

//        $queryBuilder
//            ->select('pho')
//            ->from('SkaphandrusAppBundle:SkPhotoContest', 'con')
//            ->innerJoin('con', 'SkaphandrusAppBundle:SkPhotoContestCategory', 'cat', 'con.id = cat.contest_id')
//            ->innerJoin('cat', 'SkaphandrusAppBundle:SkPhoto', 'pho', 'cat.id = pho.id')
//            ->where( 'pho.fos_user_id :user_id')
//            ->andWhere('con.id :contest_id')
//            ->setParameter('user_id',  $user_id)
//            ->setParameter('contest_id',  $contest_id);    
//        
//        $qb->select('u')
//                ->from('SkaphandrusAppBundle:FosUser', 'u');
//        $qb->leftJoin('u.photos', 'p', 'WITH', 'p.fosUser = u.id');

        $queryBuilder->select('p')
                ->from('SkaphandrusAppBundle:SkPhoto', 'p')
                ->join('p.category', 'c')
                ->join('c.contest', 'ct')
                ->where('p.fosUser = ?1')
                ->andWhere('c.contest = ?2')
                ->setParameter(1, $user_id)
                ->setParameter(2, $contest_id);

        $photosInContest = $queryBuilder->getQuery()->getResult();
        return $photosInContest;
    }

    public function findUsersInCountry($country_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT u.id as fosUser, count(p.id) as num_photos
                FROM fos_user as u
                JOIN sk_photo as p
                on u.id = p.fos_user_id
                JOIN sk_spot as s
                on s.id = p.spot_id
                JOIN sk_location as l
                ON l.id = s.location_id
                JOIN sk_region as r
                ON l.region_id = r.id
                JOIN sk_country as c
                ON r.country_id = c.id
                where c.id = " . $country_id . "
                group by fosUser";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $user = $em->getRepository('SkaphandrusAppBundle:FosUser')->find($value['fosUser']);
            $user->setPhotosInUser($value['num_photos']);
            $result[] = $user;
        }

        return $result;
    }

    public function findUsersInCountry2($country_id) {
        $query = $this->getEntityManager()
                        ->createQuery(
                                "SELECT u as fosUser, COUNT(photo.id) as photosInUser
                FROM SkaphandrusAppBundle:FosUser u
                JOIN SkaphandrusAppBundle:SkPhoto photo WITH u.id = photo.fosUser
                JOIN photo.spot s
                JOIN s.location l
                JOIN l.region r
                WHERE r.country = :country_id
                GROUP BY u.id"
                        )->setParameter('country_id', $country_id);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findUsersInCountry3($country_id) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('u as fosUser')
                ->addSelect('Count(p.id) as photosInUser')
                ->from('SkaphandrusAppBundle:FosUser', 'u')

                //users
                ->join('u.photos', 'p', 'WITH', 'p.fosUser = u.id')

                //spots, locations, regions and countries
                ->join('p.spot', 's', 'WITH', 'p.spot = s.id')
                ->join('s.location', 'l', 'WITH', 's.location = l.id')
                ->join('l.region', 'r', 'WITH', 'l.region = r.id')
                ->join('r.country', 'c', 'WITH', 'r.country = ?1')
                ->groupBy('u.id')
                ->setParameter(1, $country_id);

        $result = $qb->getQuery()->getResult();
        
        return $result;
    }

    public function findUsersInLocation($location_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT u.id as user, count(p.id) as num_photos
                FROM fos_user as u
                JOIN sk_photo as p
                on u.id = p.fos_user_id
                JOIN sk_spot as s
                on s.id = p.spot_id
                JOIN sk_location as l
                ON l.id = s.location_id
                where l.id = " . $location_id . "
                group by user";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $user = $em->getRepository('SkaphandrusAppBundle:FosUser')->find($value['user']);
            $user->setPhotosInUser($value['num_photos']);
            $result[] = $user;
        }

        return $result;
    }

    public function findUsersInSpot($spot_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT u.id as user, count(p.id) as num_photos
                FROM fos_user as u
                JOIN sk_photo as p
                on u.id = p.fos_user_id
                JOIN sk_spot as s
                on s.id = p.spot_id
                where s.id = " . $spot_id . "
                group by user";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $user = $em->getRepository('SkaphandrusAppBundle:FosUser')->find($value['user']);
            $user->setPhotosInUser($value['num_photos']);
            $result[] = $user;
        }

        return $result;
    }

    public function findUsersInSpecies($species_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT u.id as user, count(p.id) as num_photos
                FROM fos_user as u
                JOIN sk_photo as p
                on u.id = p.fos_user_id
                JOIN sk_species as sp
                on sp.id = p.species_id
                where sp.id = " . $species_id . "
                group by user";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $user = $em->getRepository('SkaphandrusAppBundle:FosUser')->find($value['user']);
            $user->setPhotosInUser($value['num_photos']);
            $result[] = $user;
        }

        return $result;
    }
    
    
    public function findUsersInTaxon2($next_taxon, $taxon_name, $taxon_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT u.id as user, up.id, up.fos_user_id, up.firstname, up.middlename, up.lastname, count(p.id) as photosInUser 
                    FROM fos_user as u
                    JOIN sk_personal as up
                    on u.id = up.fos_user_id
                    JOIN sk_photo as p
                    on u.id = p.fos_user_id
                    JOIN sk_species as sp
                    on sp.id = p.species_id
                    JOIN sk_genus as g
                    on g.id = sp.genus_id
                    JOIN sk_family as f
                    on f.id = g.family_id
                    JOIN sk_order as o
                    on o.id = f.order_id
                    JOIN sk_class as c
                    on c.id = o.class_id
                    JOIN sk_phylum as phy
                    on phy.id = c.phylum_id
                    JOIN sk_kingdom as k
                    on k.id = phy.kingdom_id
                    where " . substr($taxon_name, 0, 1) . ".id = ". $taxon_id . "
                    group by user";
        
        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $user = $em->getRepository('SkaphandrusAppBundle:FosUser')->find($value['user']);
            $user->setPhotosInUser($value['photosInUser']);
            $result[] = $user;
        }

        return $result;
    }
    
    
    
    public function findUsersInTaxon($next_taxon, $taxon_name, $taxon_id) {

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('SkaphandrusAppBundle:FosUser', 'u');
        $rsm->addFieldResult('u', 'id', 'id');
        $rsm->addFieldResult('u', 'username', 'username');
        $rsm->addJoinedEntityResult('SkaphandrusAppBundle:SkPersonal', 'up', 'u', 'personal');
        $rsm->addFieldResult('up', 'id', 'id');
//        $rsm->addFieldResult('up', 'fos_user_id', 'fosUser');
        $rsm->addFieldResult('up', 'firstname', 'firstname');
        $rsm->addFieldResult('up', 'middlename', 'middlename');
        $rsm->addFieldResult('up', 'lastname', 'lastname');
        
        $query = $this->getEntityManager()->createNativeQuery(
                "SELECT u.id, up.id, up.fos_user_id, up.firstname, up.middlename, up.lastname, count(p.id) as photosInUser 
                    FROM fos_user as u
                    JOIN sk_personal as up
                    on u.id = up.fos_user_id
                    JOIN sk_photo as p
                    on u.id = p.fos_user_id
                    JOIN sk_species as sp
                    on sp.id = p.species_id
                    JOIN sk_genus as g
                    on g.id = sp.genus_id
                    JOIN sk_family as f
                    on f.id = g.family_id
                    JOIN sk_order as o
                    on o.id = f.order_id
                    JOIN sk_class as c
                    on c.id = o.class_id
                    JOIN sk_phylum as phy
                    on phy.id = c.phylum_id
                    JOIN sk_kingdom as k
                    on k.id = phy.kingdom_id
                    where " . substr($taxon_name, 0, 1) . ".id = ?
                    group by u.id", $rsm);

//        dump($query);
        
        $query->setParameter(1, $taxon_id);

        dump($query->getResult());
        
        return $query->getResult();
    }

}
