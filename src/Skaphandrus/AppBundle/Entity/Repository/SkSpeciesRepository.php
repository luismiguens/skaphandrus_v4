<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Skaphandrus\AppBundle\Utils\Utils;

/**
 * SkSpeciesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkSpeciesRepository extends EntityRepository {
    
    public function findBySlug($slug) {
        $name = Utils::unslugify($slug);

        $query = $this->getEntityManager()
                        ->createQuery(
                                'SELECT s
                FROM SkaphandrusAppBundle:SkSpecies s
                JOIN s.scientific_names sn
                WHERE sn.name = :name'
                        )->setParameter('name', $name);
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getQueryBuilder($params, $limit=20, $order = array('id' => 'desc'), $offset=0) {


        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('sp')->from('SkaphandrusAppBundle:SkSpecies', 'sp');
        $qb->leftJoin('sp.photos', 'p', 'WITH', 'p.species = sp.id');

        //users
        if (array_key_exists('fosUser', $params)) {
            $qb->andWhere('p.fosUser = ?2');
            $qb->setParameter(2, $params['fosUser']);
        }

        //spots, locations, regions and countries
        if (array_key_exists('spot', $params)) {
            $qb->andWhere('p.spot = ?3');
            $qb->setParameter(3, $params['spot']);
        }

        if (array_key_exists('location', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = ?4');
            $qb->setParameter(4, $params['location']);
        }

        if (array_key_exists('region', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = l.id');
            $qb->join('l.region', 'r', 'WITH', 'l.region = ?5');
            $qb->setParameter(5, $params['region']);
        }

        if (array_key_exists('country', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = l.id');
            $qb->join('l.region', 'r', 'WITH', 'l.region = r.id');
            $qb->join('r.country', 'c', 'WITH', 'r.country = ?6');
            $qb->setParameter(6, $params['country']);
        }





        //species, genus, families, orders, classes, kingdoms
        if (array_key_exists('species', $params)) {
            $qb->andWhere('p.species = ?7');
            $qb->setParameter(7, $params['species']);
        }

        if (array_key_exists('kingdom', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ph.id');
            $qb->join('ph.kingdom', 'k', 'WITH', 'ph.kingdom = ?8');
            $qb->setParameter(8, $params['kingdom']);
        }


        if (array_key_exists('phylum', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ?9');
            $qb->setParameter(9, $params['phylum']);
        }

        if (array_key_exists('class', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = ?10');
            $qb->setParameter(10, $params['class']);
        }

        if (array_key_exists('order', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = ?11');
            $qb->setParameter(11, $params['order']);
        }

        if (array_key_exists('family', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = ?12');
            $qb->setParameter(12, $params['family']);
        }

        if (array_key_exists('genus', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = ?13');
            $qb->setParameter(13, $params['genus']);
        }

//        if ($order) {
//            $qb->orderBy('p.'.key($order), $order[key($order)]);
//        }
//
//        if ($offset) {
//            $qb->setFirstResult($offset);
//        }
//        
//       
//            $qb->setMaxResults($limit);
//echo $qb;

        return $qb;
    }


    public function findByUserId($user_id) {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT s
                FROM SkaphandrusAppBundle:SkSpecies s
                JOIN SkaphandrusAppBundle:SkPhoto p
                    WITH s.id = IDENTITY(p.species)
                WHERE IDENTITY(p.fosUser) = :user_id'
                )->setParameter('user_id', $user_id);
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    /**
     * Metodo que com base nos characters selecionados na ferramenta de identificação, devolve as espécies que fazem match.
     */
    public function getSpeciesIDSFromCharacterIDS($characters, $module_id = null) {
        
        /*
         * Estrutura do array characters ex: characters[criteria_id][character_id]
         *
         * Para o critério 15 foi selecionado o character 57 e 58 e pa5ra o critério 16 foi selecionado o character 60
         * Array ( [15] => Array ( [0] => 57 [1] => 58 ) [16] => Array ( [0] => 60 ) )
         */

        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $criterias = array_keys($characters);
        
        $sql = "select distinct(T0.species_id), T0.genus_id, T0.family_id from";

        //para cada criteria selecionado tenho de fazer um join
        foreach ($criterias as $key => $criteria) :

            if ($key > 0):
                $sql .= " join";
            endif;

            $sql .= "(SELECT species_id, genus_id, family_id FROM sk_identification_criteria_matrix". (($module_id==null) ? " " : "_". $module_id) ." 
                WHERE character_id in ( " . implode(',', $characters[$criteria]) . ")) T" . $key;

            if ($key > 0):
                $sql .= " on T" . ($key - 1) . ".species_id = T" . $key . ".species_id";
            endif;

        endforeach;

        
        $sql .= " order by T0.family_id, T0.genus_id";
        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $result[] = $value['species_id'];
        }

        return $result;
    }

    /**
     * Metodo que com base no modulo_id, devolve as especies que pertencem a esse modulo.
     */
    public function getSpeciesIDSFromModule($module_obj) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT distinct(species_id) FROM sk_identification_criteria_matrix_". $module_obj->getId();
        $sql .= " order by family_id, genus_id";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $result[] = $value['species_id'];
        }

        return $result;
    }

    public function countPhotosSpotArray($spot_id) {
        $photos = $this->getEntityManager()
            ->createQuery(
                'SELECT IDENTITY(p.species) species_id, count(p.id) as photo_count
                FROM SkaphandrusAppBundle:SkPhoto p
                JOIN p.spot s
                WHERE s.id = :spot_id
                GROUP BY species_id'
                )->setParameter('spot_id', $spot_id)->getResult();

        $photos_array = array();
        foreach ($photos as $result) {
            $photos_array[$result['species_id']] = $result['photo_count'];
        }
        return $photos_array;
    }

    public function countPhotosLocationArray($location_id) {
        $photos = $this->getEntityManager()
            ->createQuery(
                'SELECT IDENTITY(p.species) species_id, count(p.id) as photo_count
                FROM SkaphandrusAppBundle:SkPhoto p
                JOIN p.spot s
                JOIN s.location l
                WHERE l.id = :location_id
                GROUP BY species_id'
                )->setParameter('location_id', $location_id)->getResult();

        $photos_array = array();
        foreach ($photos as $result) {
            $photos_array[$result['species_id']] = $result['photo_count'];
        }
        return $photos_array;
    }

    public function countPhotosCountryArray($country_id) {
        $photos = $this->getEntityManager()
            ->createQuery(
                'SELECT IDENTITY(p.species) species_id, count(p.id) as photo_count
                FROM SkaphandrusAppBundle:SkPhoto p
                JOIN p.spot s
                JOIN s.location l
                JOIN l.region r
                JOIN r.country c
                WHERE c.id = :country_id
                GROUP BY species_id'
                )->setParameter('country_id', $country_id)->getResult();

        $photos_array = array();
        foreach ($photos as $result) {
            $photos_array[$result['species_id']] = $result['photo_count'];
        }
        return $photos_array;
    }
}
