<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Skaphandrus\AppBundle\Utils\Utils;

/**
 * SkSpeciesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkSpeciesRepository extends EntityRepository {

    public function getMoreSpeciesSpot($spot_id, $limit = 3, $offset = 0) {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name, ssn.author as sss_author, count(p.id) as num_photos
                FROM sk_species_scientific_name as ssn
                join sk_species as sp
                on sp.id = ssn.species_id
                join sk_photo as p
                on sp.id = p.species_id
                join sk_spot as s
                on s.id = p.spot_id
                where s.id = " . $spot_id . "
                group by species_id 
                order by num_photos desc
                limit " . $limit . "
                offset " . $offset;

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
//            $species = $em->getRepository('SkaphandrusAppBundle:SkSpecies')->find($value['species']);  

            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $scientific_name->setAuthor($value['sss_author']);
            $species->addScientificName($scientific_name);
            $species->setPhotosInSpecies($value['num_photos']);
            $result[] = $species;
        }

        return $result;
    }

    public function getMoreSpeciesLocation($location_id, $limit = 3, $offset = 0) {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name, ssn.author as sss_author, count(p.id) as num_photos
                FROM sk_species_scientific_name as ssn
                join sk_species as sp on sp.id = ssn.species_id
                join sk_photo as p on sp.id = p.species_id
                join sk_spot as s on s.id = p.spot_id
                join sk_location as l on l.id = s.location_id
                where l.id = " . $location_id . "
                group by species_id 
                order by num_photos desc
                limit " . $limit . "
                offset " . $offset;

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $scientific_name->setAuthor($value['sss_author']);
            $species->addScientificName($scientific_name);
            $species->setPhotosInSpecies($value['num_photos']);
            $result[] = $species;
        }

        return $result;
    }

    public function getMoreSpeciesCountry($country_id, $limit = 3, $offset = 0) {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name, ssn.author as sss_author, count(p.id) as num_photos
                FROM sk_species_scientific_name as ssn
                join sk_species as sp
                on sp.id = ssn.species_id
                join sk_photo as p
                on sp.id = p.species_id
                join sk_spot as s
                on s.id = p.spot_id
                join sk_location as l
                on l.id = s.location_id
                join sk_region as r
                on r.id = l.region_id
                join sk_country as c
                on c.id = r.country_id
                where c.id = " . $country_id . "
                group by species_id 
                order by num_photos desc
                limit " . $limit . "
                offset " . $offset;

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
//            $species = $em->getRepository('SkaphandrusAppBundle:SkSpecies')->find($value['species']);

            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $scientific_name->setAuthor($value['sss_author']);
            $species->addScientificName($scientific_name);
            $species->setPhotosInSpecies($value['num_photos']);
            $result[] = $species;
        }

        return $result;
    }

    public function findPhotosSpot($species_id, $spot_id) {
        $query = $this->getEntityManager()->createQuery(
                        'SELECT p
            FROM SkaphandrusAppBundle:SkPhoto p
            JOIN p.spot s
            WHERE p.species = :species_id and s.id = :spot_id
            ORDER BY p.id desc'
                )->setParameter('species_id', $species_id)->setParameter('spot_id', $spot_id)->setMaxResults(10);

        return $query->getResult();
    }

    public function findPhotosLocation($species_id, $location_id) {
        $query = $this->getEntityManager()->createQuery(
                        'SELECT p
            FROM SkaphandrusAppBundle:SkPhoto p
            JOIN p.spot s
            JOIN s.location l
            WHERE p.species = :species_id and l.id = :location_id
            ORDER BY p.id desc'
                )->setParameter('species_id', $species_id)->setParameter('location_id', $location_id)->setMaxResults(10);

        return $query->getResult();
    }

    public function findPhotosCountry($species_id, $country_id) {
        $query = $this->getEntityManager()->createQuery(
                        'SELECT p
            FROM SkaphandrusAppBundle:SkPhoto p
            JOIN p.spot s
            JOIN s.location l
            JOIN l.region r
            WHERE p.species = :species_id and r.country = :country_id
            ORDER BY p.id desc'
                )->setParameter('species_id', $species_id)->setParameter('country_id', $country_id)->setMaxResults(10);

        return $query->getResult();
    }

    public function findBySlug($slug) {
        $name = Utils::unslugify($slug);

        $query = $this->getEntityManager()
                        ->createQuery(
                                'SELECT s
                FROM SkaphandrusAppBundle:SkSpecies s
                JOIN s.scientific_names sn
                WHERE sn.name = :name'
                        )->setParameter('name', $name);
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findCriteriasWithCharacters($species_id) {

        $query = $this->getEntityManager()
                        ->createQuery(
                                'SELECT crits, chars
                FROM SkaphandrusAppBundle:SkIdentificationCriteria crits
                JOIN crits.characters chars 
                JOIN chars.species sp
                WHERE sp.id = :species_id'
                        )->setParameter('species_id', $species_id);
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getQueryBuilder($params, $limit = 20, $order = array('id' => 'desc'), $offset = 0) {


        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('sp')->from('SkaphandrusAppBundle:SkSpecies', 'sp');
        $qb->leftJoin('sp.photos', 'p', 'WITH', 'p.species = sp.id');

        //users
        if (array_key_exists('fosUser', $params)) {
            $qb->andWhere('p.fosUser = ?2');
            $qb->setParameter(2, $params['fosUser']);
        }

        //spots, locations, regions and countries
        if (array_key_exists('spot', $params)) {
            $qb->andWhere('p.spot = ?3');
            $qb->setParameter(3, $params['spot']);
        }

        if (array_key_exists('location', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = ?4');
            $qb->setParameter(4, $params['location']);
        }

        if (array_key_exists('region', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = l.id');
            $qb->join('l.region', 'r', 'WITH', 'l.region = ?5');
            $qb->setParameter(5, $params['region']);
        }

        if (array_key_exists('country', $params)) {
            $qb->join('p.spot', 's', 'WITH', 'p.spot = s.id');
            $qb->join('s.location', 'l', 'WITH', 's.location = l.id');
            $qb->join('l.region', 'r', 'WITH', 'l.region = r.id');
            $qb->join('r.country', 'c', 'WITH', 'r.country = ?6');
            $qb->setParameter(6, $params['country']);
        }

        //species, genus, families, orders, classes, kingdoms
        if (array_key_exists('species', $params)) {
            $qb->andWhere('p.species = ?7');
            $qb->setParameter(7, $params['species']);
        }

        if (array_key_exists('kingdom', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ph.id');
            $qb->join('ph.kingdom', 'k', 'WITH', 'ph.kingdom = ?8');
            $qb->setParameter(8, $params['kingdom']);
        }


        if (array_key_exists('phylum', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ?9');
            $qb->setParameter(9, $params['phylum']);
        }

        if (array_key_exists('class', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = ?10');
            $qb->setParameter(10, $params['class']);
        }

        if (array_key_exists('order', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = ?11');
            $qb->setParameter(11, $params['order']);
        }

        if (array_key_exists('family', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = ?12');
            $qb->setParameter(12, $params['family']);
        }

        if (array_key_exists('genus', $params)) {
            $qb->join('p.species', 's', 'WITH', 'p.species = s.id');
            $qb->join('s.genus', 'g', 'WITH', 's.genus = ?13');
            $qb->setParameter(13, $params['genus']);
        }

//        if ($order) {
//            $qb->orderBy('p.'.key($order), $order[key($order)]);
//        }
//
//        if ($offset) {
//            $qb->setFirstResult($offset);
//        }
//        
//       
//            $qb->setMaxResults($limit);
//echo $qb;

        return $qb;
    }

    public function getQueryBuilderForSpeciesList($params, $limit = 20, $order = array('id' => 'desc'), $offset = 0) {

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('sn', 's', 'p')->from('SkaphandrusAppBundle:SkSpeciesScientificName', 'sn');

        if (array_key_exists('kingdom', $params)) {
            $qb->join('sn.species', 's', 'WITH', 'sn.species = s.id');

            $qb->leftJoin('s.photos', 'p', 'WITH', 's.id = p.species');

            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ph.id');
            $qb->join('ph.kingdom', 'k', 'WITH', 'ph.kingdom = ?8');
            $qb->setParameter(8, $params['kingdom']);
        }


        if (array_key_exists('phylum', $params)) {
            $qb->join('sn.species', 's', 'WITH', 'sn.species = s.id');

            $qb->leftJoin('s.photos', 'p', 'WITH', 's.id = p.species');

            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = c.id');
            $qb->join('c.phylum', 'ph', 'WITH', 'c.phylum = ?9');
            $qb->setParameter(9, $params['phylum']);
        }

        if (array_key_exists('class', $params)) {
            $qb->join('sn.species', 's', 'WITH', 'sn.species = s.id');

            $qb->leftJoin('s.photos', 'p', 'WITH', 's.id = p.species');

            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = o.id');
            $qb->join('o.class', 'c', 'WITH', 'o.class = ?10');
            $qb->setParameter(10, $params['class']);
        }

        if (array_key_exists('order', $params)) {
            $qb->join('sn.species', 's', 'WITH', 'sn.species = s.id');

            $qb->leftJoin('s.photos', 'p', 'WITH', 's.id = p.species');

            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = f.id');
            $qb->join('f.order', 'o', 'WITH', 'f.order = ?11');
            $qb->setParameter(11, $params['order']);
        }

        if (array_key_exists('family', $params)) {
            $qb->join('sn.species', 's', 'WITH', 'sn.species = s.id');

            $qb->leftJoin('s.photos', 'p', 'WITH', 's.id = p.species');

            $qb->join('s.genus', 'g', 'WITH', 's.genus = g.id');
            $qb->join('g.family', 'f', 'WITH', 'g.family = ?12');
            $qb->setParameter(12, $params['family']);
        }

        if (array_key_exists('genus', $params)) {
            $qb->join('sn.species', 's', 'WITH', 'sn.species = s.id');

            $qb->leftJoin('s.photos', 'p', 'WITH', 's.id = p.species');

            $qb->join('s.genus', 'g', 'WITH', 's.genus = ?13');
            $qb->setParameter(13, $params['genus']);
        }



        return $qb;
    }

    public function findByUserId($user_id) {
        $query = $this->getEntityManager()
                        ->createQuery(
                                'SELECT s
                FROM SkaphandrusAppBundle:SkSpecies s
                JOIN SkaphandrusAppBundle:SkPhoto p
                    WITH s.id = IDENTITY(p.species)
                WHERE IDENTITY(p.fosUser) = :user_id'
                        )->setParameter('user_id', $user_id);
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

//    public function findWithPhotoCountByUserId($user_id) {
//        $query = $this->getEntityManager()
//            ->createQuery(
//                'SELECT s as species, COUNT(p) as photo_count
//                FROM SkaphandrusAppBundle:SkSpecies s
//                JOIN SkaphandrusAppBundle:SkPhoto p
//                    WITH s.id = IDENTITY(p.species)
//                WHERE IDENTITY(p.fosUser) = :user_id
//                GROUP BY s.id'
//                )->setParameter('user_id', $user_id);
//        try {
//            return $query->getResult();
//        } catch (\Doctrine\ORM\NoResultException $e) {
//            return null;
//        }
//    }

    /**
     * Metodo que com base nos characters selecionados na ferramenta de identificação, devolve as espécies que fazem match.
     */
    public function getSpeciesIDSFromCharacterIDS($characters, $module_id = null) {

        /*
         * Estrutura do array characters ex: characters[criteria_id][character_id]
         *
         * Para o critério 15 foi selecionado o character 57 e 58 e pa5ra o critério 16 foi selecionado o character 60
         * Array ( [15] => Array ( [0] => 57 [1] => 58 ) [16] => Array ( [0] => 60 ) )
         */

        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $criterias = array_keys($characters);

        $sql = "select distinct(T0.species_id), T0.genus_id, T0.family_id from";

        //para cada criteria selecionado tenho de fazer um join
        foreach ($criterias as $key => $criteria) :

            if ($key > 0):
                $sql .= " join";
            endif;

            $sql .= "(SELECT species_id, genus_id, family_id FROM sk_identification_criteria_matrix" . (($module_id == null) ? " " : "_" . $module_id) . " 
                WHERE character_id in ( " . implode(',', $characters[$criteria]) . ")) T" . $key;

            if ($key > 0):
                $sql .= " on T" . ($key - 1) . ".species_id = T" . $key . ".species_id";
            endif;

        endforeach;


        $sql .= " order by T0.family_id, T0.genus_id";


        //dump($sql);

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $result[] = $value['species_id'];
        }

        return $result;
    }

    /**
     * Metodo que com base no modulo_id, devolve as especies que pertencem a esse modulo.
     */
    public function getSpeciesIDSFromModule($module_obj) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT distinct(species_id) FROM sk_identification_criteria_matrix_" . $module_obj->getId();
        $sql .= " order by family_id, genus_id";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $result[] = $value['species_id'];
        }

        return $result;
    }

//    
//    SELECT distinct(sk_identification_criteria_matrix_13.species_id) as id, sk_species_scientific_name.name as name, image_refs.image_url
//FROM sk_identification_criteria_matrix_13                
//JOIN sk_species_scientific_name on sk_identification_criteria_matrix_13.species_id = sk_species_scientific_name.species_id
//JOIN ( select species_id, image_url from sk_species_image_ref ) image_refs on image_refs.species_id = sk_identification_criteria_matrix_13.species_id
//ORDER by id asc

    /**
     * Metodo que com base no modulo_id, devolve as especies que pertencem a esse modulo.
     */
    public function getSpeciesByPKS($pks) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name
                FROM sk_species_scientific_name as ssn
                join sk_species as sp on sp.id = ssn.species_id
                where sp.id in (" . implode(", ", $pks) . ")
                order by species_id asc ";

        //echo $sql;

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $species->addScientificName($scientific_name);
            $result[] = $species;
        }

        return $result;
    }

    public function countPhotosSpotArray($spot_id) {
        $photos = $this->getEntityManager()
                        ->createQuery(
                                'SELECT IDENTITY(p.species) species_id, count(p.id) as photo_count
                FROM SkaphandrusAppBundle:SkPhoto p
                JOIN p.spot s
                WHERE s.id = :spot_id
                GROUP BY species_id'
                        )->setParameter('spot_id', $spot_id)->getResult();

        $photos_array = array();
        foreach ($photos as $result) {
            $photos_array[$result['species_id']] = $result['photo_count'];
        }
        return $photos_array;
    }

    public function countPhotosLocationArray($location_id) {
        $photos = $this->getEntityManager()
                        ->createQuery(
                                'SELECT IDENTITY(p.species) species_id, count(p.id) as photo_count
                FROM SkaphandrusAppBundle:SkPhoto p
                JOIN p.spot s
                JOIN s.location l
                WHERE l.id = :location_id
                GROUP BY species_id'
                        )->setParameter('location_id', $location_id)->getResult();

        $photos_array = array();
        foreach ($photos as $result) {
            $photos_array[$result['species_id']] = $result['photo_count'];
        }
        return $photos_array;
    }

    public function countPhotosCountryArray($country_id) {
        $photos = $this->getEntityManager()
                        ->createQuery(
                                'SELECT IDENTITY(p.species) species_id, count(p.id) as photo_count
                FROM SkaphandrusAppBundle:SkPhoto p
                JOIN p.spot s
                JOIN s.location l
                JOIN l.region r
                JOIN r.country c
                WHERE c.id = :country_id
                GROUP BY species_id'
                        )->setParameter('country_id', $country_id)->getResult();

        $photos_array = array();
        foreach ($photos as $result) {
            $photos_array[$result['species_id']] = $result['photo_count'];
        }
        return $photos_array;
    }

    public function findScientificNameSearchResults($string, $locale) {
        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT sn.name as title, s as object, st.description as description
                FROM SkaphandrusAppBundle:SkSpecies s
                JOIN SkaphandrusAppBundle:SkSpeciesScientificName sn
                    WITH IDENTITY(sn.species) = s.id
                JOIN SkaphandrusAppBundle:SkSpeciesTranslation st
                    WITH IDENTITY(st.translatable) = s.id
                WHERE st.locale = :locale
                AND sn.name LIKE :string'
                        )->setParameter('locale', $locale)->setParameter('string', '%' . $string . '%')->getResult();
    }

    public function findAllSpeciesLite($limit, $offset) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name
                FROM sk_species_scientific_name as ssn
                join sk_species as sp
                on sp.id = ssn.species_id
                group by species_id 
                order by species_id asc
                limit " . $limit . "
                offset " . $offset;

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $species->addScientificName($scientific_name);
            $result[] = $species;
        }

        return $result;
    }

    public function findSpeciesInCountry($country_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name, ssn.author as sss_author, count(p.id) as num_photos
                FROM sk_species_scientific_name as ssn
                join sk_species as sp
                on sp.id = ssn.species_id
                join sk_photo as p
                on sp.id = p.species_id
                join sk_spot as s
                on s.id = p.spot_id
                join sk_location as l
                on l.id = s.location_id
                join sk_region as r
                on r.id = l.region_id
                join sk_country as c
                on c.id = r.country_id
                where c.id = " . $country_id . "
                group by species_id 
                order by num_photos desc";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
//            $species = $em->getRepository('SkaphandrusAppBundle:SkSpecies')->find($value['species']);

            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $scientific_name->setAuthor($value['sss_author']);
            $species->addScientificName($scientific_name);
            $species->setPhotosInSpecies($value['num_photos']);
            $result[] = $species;
        }

        return $result;
    }

    public function findSpeciesInLocation($location_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name, ssn.author as sss_author, count(p.id) as num_photos
                FROM sk_species_scientific_name as ssn
                join sk_species as sp
                on sp.id = ssn.species_id
                join sk_photo as p
                on sp.id = p.species_id
                join sk_spot as s
                on s.id = p.spot_id
                join sk_location as l
                on l.id = s.location_id
                where l.id = " . $location_id . "
                group by species_id 
                order by num_photos desc";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
//            $species = $em->getRepository('SkaphandrusAppBundle:SkSpecies')->find($value['species']);

            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $scientific_name->setAuthor($value['sss_author']);
            $species->addScientificName($scientific_name);
            $species->setPhotosInSpecies($value['num_photos']);
            $result[] = $species;
        }

        return $result;
    }

    public function findSpeciesInSpot($spot_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name, ssn.author as sss_author, count(p.id) as num_photos
                FROM sk_species_scientific_name as ssn
                join sk_species as sp
                on sp.id = ssn.species_id
                join sk_photo as p
                on sp.id = p.species_id
                join sk_spot as s
                on s.id = p.spot_id
                where s.id = " . $spot_id . "
                group by species_id 
                order by num_photos desc";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
//            $species = $em->getRepository('SkaphandrusAppBundle:SkSpecies')->find($value['species']);  

            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $scientific_name->setAuthor($value['sss_author']);
            $species->addScientificName($scientific_name);
            $species->setPhotosInSpecies($value['num_photos']);
            $result[] = $species;
        }

        return $result;
    }

    public function findSpeciesInUser($user_id) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sp.id as species_id, ssn.name as ssn_name, ssn.author as sss_author, count(p.id) as num_photos
                FROM sk_species_scientific_name as ssn
                join sk_species as sp
                on sp.id = ssn.species_id
                join sk_photo as p
                on sp.id = p.species_id
                where p.fos_user_id = " . $user_id . "
                group by species_id 
                order by num_photos desc";

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();
        $result = array();

        foreach ($values as $value) {
//            $species = $em->getRepository('SkaphandrusAppBundle:SkSpecies')->find($value['species']);

            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
            $species->setId($value['species_id']);
            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
            $scientific_name->setName($value['ssn_name']);
            $scientific_name->setAuthor($value['sss_author']);
            $species->addScientificName($scientific_name);
            $species->setPhotosInSpecies($value['num_photos']);
            $result[] = $species;
        }

        return $result;
    }

    public function getSkPhotosForIdentification($species_id, $limit = 3) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $sql = "SELECT sk_photo.id as id, best_rate.rating as rating FROM sk_photo
                LEFT JOIN ( 
                        SELECT id, photo_id, species_id, max(rating) as rating
                        FROM sk_photo_species_validation GROUP BY photo_id
                        order by rating desc ) as best_rate
                ON sk_photo.id = best_rate.photo_id
                WHERE sk_photo.species_id = " . $species_id . "
                order by best_rate.rating desc lIMIT " . $limit;

        $statement = $connection->prepare($sql);
        $statement->execute();
        $values = $statement->fetchAll();

        // echo $sql;
//        $result = array();
//
//        foreach ($values as $value) {
//
//            $species = new \Skaphandrus\AppBundle\Entity\SkSpecies();
//            $species->setId($value['species_id']);
////            $scientific_name = new \Skaphandrus\AppBundle\Entity\SkSpeciesScientificName();
////            $scientific_name->setName($value['ssn_name']);
////            $scientific_name->setAuthor($value['sss_author']);
////            $species->addScientificName($scientific_name);
////            $species->setPhotosInSpecies($value['num_photos']);
//            $result[] = $species;
//        }


        return $values;
    }

    public function getPhotosForIdentification($species_id, $module_id, $limit = 1) {
        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $photos = array();
       
        
        
        if (count($photos) < $limit) {
            $i = 1;

            //IMAGENS SKAPHANDRUS (prioridade as que têm maior rating)
            $sql = "SELECT sk_photo.id as id, best_rate.rating as rating FROM sk_photo
                LEFT JOIN ( 
                        SELECT id, photo_id, species_id, max(rating) as rating
                        FROM sk_photo_species_validation GROUP BY photo_id
                        order by rating desc ) as best_rate
                ON sk_photo.id = best_rate.photo_id
                WHERE sk_photo.species_id = " . $species_id . "
                order by best_rate.rating desc lIMIT " . $limit;

            $statement = $connection->prepare($sql);
            $statement->execute();
            $values = $statement->fetchAll();

            foreach ($values as $photo) {
                $skPhoto = $em->getRepository('SkaphandrusAppBundle:SkPhoto')->find($photo['id']);

                $licence = $skPhoto->getCreative();
                if ($licence == null):
                    $licence = "© All rights reserved";
                else:
                    $licence = $skPhoto->getCreative()->getName();
                endif;

                $photos[] = array(
                    'id' => $skPhoto->getId(),
                    'image_src' => "",
                    'image_type' => "skaphandrus",
                    'photographer' => $skPhoto->getFosUser()->getName(),
                    'license' => $licence
                );

                if ($i++ >= $limit)
                    break;
            }
        }


        //IMAGENS GOOGLE (se o numero de fotografias no skaphandrus for inferior ao limite)
        if (count($photos) < $limit) {

            $i = 1;
            $species_obj = $em->getRepository("SkaphandrusAppBundle:SkSpecies")->findOneById($species_id);

            foreach ($species_obj->getImageRefs() as $imageRef_obj) {
                if ($imageRef_obj->getIsActive()) {

                    $licence = $imageRef_obj->getLicense();
                    if ($licence == "" || $licence == NULL):
                        $licence = "Images may be subject to copyright.";
                    else:
                        $licence = $imageRef_obj->getLicense();
                    endif;

                    $photos[] = array(
                        'id' => $imageRef_obj->getId(),
                        'image_src' => $imageRef_obj->getImageSrc(),
                        'image_url' => $imageRef_obj->getImageUrl(),
                        'image_type' => "google",
                        'photographer' => $imageRef_obj->getPhotographer(),
                        'license' => $licence
                            //Milton já está a receber photographer
                    );
                }
                if ($i++ >= $limit)
                    break;
            }
        }









        //ILUSTRAÇÃO DEFAULT DO MODULO (caso não existam imagens em nenhum dos formatos anteriores)
//        if (count($photos) < 1) {
//
//            $module_obj = $this->getDoctrine()
//                    ->getRepository("SkaphandrusAppBundle:SkIdentificationModule")
//                    ->findOneById($module_id);
//
//            $photos[] = array(
//                'id' => '1',
//                'image_src' => "",
//                'image_url' => 'https://skaphandrus.com',
//                'image_type' => "skaphandrus",
//                'photographer' => "Skaphandrus.com",
//                'license' => "© All rights reserved"
//
//            );
//        }
        return $photos;
    }

}
