<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SkIdentificationCharacterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkIdentificationCharacterRepository extends EntityRepository {

    /**
     * Metodo que com base nas especies enviadas, devolve as os critÃ©rios e caracteres que fazem match.
     *
     * @param type $species
     * @return type
     */
    public function getCharactersIDSFromSpecies($species_id, $module_id = null, $locale = "en") {
        $characters = array();
        $em = $this->getEntityManager();
        $connection = $em->getConnection();

        $view_name = $module_id ?
            "sk_identification_criteria_matrix_".$module_id : "sk_identification_criteria_matrix";

        $sql = "SELECT distinct(".$view_name.".character_id) as character_id, 
            sk_identification_character_translation.name as character_name, 
            sk_identification_character.image as character_image,
            sk_identification_criteria.id as criteria_id,
            sk_identification_criteria_translation.name as criteria_name
            FROM ".$view_name." 
            join sk_identification_character on ".$view_name.".character_id = sk_identification_character.id
            join sk_identification_character_translation on sk_identification_character.id = sk_identification_character_translation.id and sk_identification_character_translation.locale = '". $locale ."' 
            join sk_identification_criteria on ".$view_name.".criteria_id = sk_identification_criteria.id
            join sk_identification_criteria_translation on sk_identification_criteria.id = sk_identification_criteria_translation.id and sk_identification_criteria_translation.locale = '". $locale ."' 
            where species_id = :species_id";

        $statement = $connection->prepare($sql);
        $statement->bindValue('species_id', $species_id);
        $statement->execute();
        $results = $statement->fetchAll();

        //return $results;

        $characters = array();
        $criteria = array();
        $criterias = array();
        $previous_criteria = 0;

        foreach ($results as $key => $value) {
            if ($previous_criteria != $value['criteria_id']) {
                if ($key != 0) {
                    $criteria['characters'] = $characters;
                    $criterias[] = $criteria;
                }

                $criteria = array();
                $criteria['id'] = $value['criteria_id'];
                $criteria['name'] = $value['criteria_name'];
                $characters = array();
            }

            $character = array();
            $character['id'] = $value['character_id'];
            $character['name'] = $value['character_name'];

            //$image_url = url_for('sf_image_file', array('format' => 'square', 'filepath' => 'characters/' . $value['character_image']));
            $character['image_url'] = 'characters/'. $value['character_image'];
            $characters[] = $character;

            $previous_criteria = $value['criteria_id'];
        }

        $criteria['characters'] = $characters;
        $criterias[] = $criteria;

        return $criterias;
    }


}
