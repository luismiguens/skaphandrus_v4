<?php

namespace Skaphandrus\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Skaphandrus\AppBundle\Utils\Utils;

/**
 * SkLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkLocationRepository extends EntityRepository {

    public function findBySlug($slug, $country, $locale) {
        $name = Utils::unslugify($slug);

        $query = $this->getEntityManager()
                        ->createQuery(
                                'SELECT l, t
                FROM SkaphandrusAppBundle:SkLocation l
                JOIN l.translations t
                JOIN l.region r
                WHERE t.name = :name
                AND t.locale = :locale
                AND IDENTITY(r.country) = ' . $this->getEntityManager()->getRepository('SkaphandrusAppBundle:SkCountry')->findBySlug($country)->getId()
                        )->setParameter('name', $name)->setParameter('locale', $locale);
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findLikeName($term, $locale) {

        return $this->getEntityManager()->createQuery(
                        "SELECT l
                FROM SkaphandrusAppBundle:SkLocation l
                JOIN l.translations t
                WHERE t.name LIKE :term
         AND t.locale = :locale
        ORDER BY t.name DESC"
                )->setParameter('term', '%' . $term . '%')->setParameter('locale', $locale)->getResult();
    }

    public function findAllForList($country_id) {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT l
                FROM SkaphandrusAppBundle:SkLocation l
                JOIN l.region r
                JOIN r.country c
                JOIN SkaphandrusAppBundle:SkSpot s
                    WITH IDENTITY(s.location) = l.id
                WHERE IDENTITY(r.country) = :country_id
                GROUP BY l.id')->setParameter('country_id', $country_id)->getResult();
    }

    public function countSpotsArray() {
        $spots = $this->getEntityManager()
            ->createQuery(
                'SELECT l.id location_id, count(s.id) as spot_count
                FROM SkaphandrusAppBundle:SkSpot s
                JOIN s.location l
                GROUP BY l.id'
                )->getResult();

        $spots_array = array();
        foreach ($spots as $result) {
            $spots_array[$result['location_id']] = $result['spot_count'];
        }
        return $spots_array;
    }

    public function countPhotosArray() {
        $photos = $this->getEntityManager()
            ->createQuery(
                'SELECT l.id location_id, count(p.id) as photo_count
                FROM SkaphandrusAppBundle:SkPhoto p
                JOIN p.spot s
                JOIN s.location l
                group by l.id'
                )->getResult();

        $photos_array = array();
        foreach ($photos as $result) {
            $photos_array[$result['location_id']] = $result['photo_count'];
        }
        return $photos_array;
    }

    public function getPhotographers($location_id) {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT u as fosUser, count(p.id) as photoCount
                FROM SkaphandrusAppBundle:FosUser u
                JOIN SkaphandrusAppBundle:SkPhoto p
                    WITH IDENTITY(p.fosUser) = u.id
                JOIN p.spot s
                JOIN s.location l
                WHERE l.id = :location_id
                GROUP BY u.id'
            )->setParameter('location_id', $location_id)->getResult();
    }
}
